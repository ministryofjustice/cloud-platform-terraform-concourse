slack-notification-defaults: &SLACK_NOTIFICATION_DEFAULTS
  channel: "#lower-priority-alarms"
slack-attachments-defaults: &SLACK_ATTACHMENTS_DEFAULTS
  fallback: "Finished building $BUILD_TEAM_NAME/$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME#$BUILD_NAME"
  title: "$BUILD_TEAM_NAME/$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME#$BUILD_NAME"
  title_link: "https://concourse.cloud-platform.service.justice.gov.uk/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
  footer: concourse.cloud-platform.service.justice.gov.uk

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest
      username: ((ministryofjustice-dockerhub.dockerhub_username))
      password: ((ministryofjustice-dockerhub.dockerhub_password))

resources:
  - name: cloud-platform-infrastructure-repository
    type: git
    source:
      uri: https://github.com/ministryofjustice/cloud-platform-infrastructure.git
      branch: ((branch_name))
      git_crypt_key: ((cloud-platform-infrastructure-git-crypt.key))

  - name: cloud-platform-cli-image
    type: registry-image
    source:
      repository: ministryofjustice/cloud-platform-cli
      tag: "1.39.6"
      username: ((ministryofjustice-dockerhub.dockerhub_username))
      password: ((ministryofjustice-dockerhub.dockerhub_password))

  - name: cloud-platform-infrastructure-image
    type: docker-image
    source:
      repository: registry.hub.docker.com/ministryofjustice/cloud-platform-infrastructure
      tag: "2.9.5"
      username: ((ministryofjustice-dockerhub.dockerhub_username))
      password: ((ministryofjustice-dockerhub.dockerhub_password))

  - name: slack-alert
    type: slack-notification
    source:
      url: https://hooks.slack.com/services/((slack-hook-id))

slack_failure_notification: &slack_failure_notification
  put: slack-alert
  params:
    <<: *SLACK_NOTIFICATION_DEFAULTS
    attachments:
      - color: "danger"
        <<: *SLACK_ATTACHMENTS_DEFAULTS

aws_params: &aws_params
  AWS_ACCESS_KEY_ID: ((aws-creds.access-key-id))
  AWS_SECRET_ACCESS_KEY: ((aws-creds.secret-access-key))
  AWS_REGION: eu-west-2
  AWS_PROFILE: moj-cp

kube-config: &KUBECONFIG_PARAMS
  KUBECONFIG: /root/.kube/config
  KUBECONFIG_CLUSTER_NAME: ((cluster_name))

aws-credentials: &AWS_CREDENTIALS
  AWS_ACCESS_KEY_ID: ((aws-creds.access-key-id))
  AWS_SECRET_ACCESS_KEY: ((aws-creds.secret-access-key))
  AWS_REGION: eu-west-2

auth0: &AUTH0_CONF
  AUTH0_DOMAIN: "justice-cloud-platform.eu.auth0.com"
  AUTH0_CLIENT_ID: ((concourse-tf-auth0-credentials.client-id))
  AUTH0_CLIENT_SECRET: ((concourse-tf-auth0-credentials.client_secret))

groups:
  - name: create-custom-cluster
    jobs:
      - create
      - cluster-plan
      - cluster-apply
      - core-plan
      - core-apply
      - components-plan
      - components-apply
      - custom-integration-tests

jobs:
  - name: create
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-infrastructure-repository
          - get: cloud-platform-cli-image
      - task: cloud-platform-cluster
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*aws_params, *AUTH0_CONF]
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository
            args:
              - -c
              - |
                #  This will export cluster name info from the "trigger" job
                mkdir ${HOME}/.aws
                echo "[moj-cp]" >> ${HOME}/.aws/credentials # This forces you to have profiles
                export CLUSTER_NAME=tp-$(date +%d%m-%H%M)
                cloud-platform cluster create --name $CLUSTER_NAME --skip-version-check --fast

        on_failure: *slack_failure_notification

  - name: cluster-plan
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-cli-image
          - get: cloud-platform-infrastructure-repository
      - task: execute-cluster-plan
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*AUTH0_CONF, *AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
            CLUSTER_NAME: ((cluster_name))
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository/terraform/aws-accounts/cloud-platform-aws/vpc/eks
            args:
              - -c
              - |
                cloud-platform terraform plan --workspace $CLUSTER_NAME --skip-version-check

  - name: cluster-apply
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-cli-image
          - get: cloud-platform-infrastructure-repository
      - task: execute-cluster-apply
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*AUTH0_CONF, *AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
            CLUSTER_NAME: ((cluster_name))
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository/terraform/aws-accounts/cloud-platform-aws/vpc/eks
            args:
            - -c
            - |
              if [[ "$CLUSTER_NAME" == *"live"* || "$CLUSTER_NAME" == *"manager"* ]]; then
                echo "Cannot apply against production clusters"
                exit 1
              else
                cloud-platform terraform apply --workspace $CLUSTER_NAME --skip-version-check
              fi

  - name: core-plan
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-cli-image
          - get: cloud-platform-infrastructure-repository
      - task: execute-core-plan
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*AUTH0_CONF, *AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
            CLUSTER_NAME: ((cluster_name))
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository/terraform/aws-accounts/cloud-platform-aws/vpc/eks/core
            args:
              - -c
              - |
                (
                  aws eks --region eu-west-2 update-kubeconfig --name $CLUSTER_NAME
                )
                cloud-platform terraform plan --workspace $CLUSTER_NAME --skip-version-check

  - name: core-apply
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-cli-image
          - get: cloud-platform-infrastructure-repository
      - task: execute-core-apply
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*AUTH0_CONF, *AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
            CLUSTER_NAME: ((cluster_name))
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository/terraform/aws-accounts/cloud-platform-aws/vpc/eks/core
            args:
            - -c
            - |
              if [[ "$CLUSTER_NAME" == *"live"* || "$CLUSTER_NAME" == *"manager"* ]]; then
                echo "Cannot apply against production clusters"
                exit 1
              else
                (
                  aws eks --region eu-west-2 update-kubeconfig --name $CLUSTER_NAME
                )
                cloud-platform terraform apply --workspace $CLUSTER_NAME --skip-version-check
              fi

  - name: components-plan
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-cli-image
          - get: cloud-platform-infrastructure-repository
      - task: execute-components-plan
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*AUTH0_CONF, *AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
            CLUSTER_NAME: ((cluster_name))
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository/terraform/aws-accounts/cloud-platform-aws/vpc/eks/core/components
            args:
              - -c
              - |
                (
                  aws eks --region eu-west-2 update-kubeconfig --name $CLUSTER_NAME
                )
                cloud-platform terraform plan --workspace $CLUSTER_NAME --skip-version-check

  - name: components-apply
    serial: true
    plan:
      - in_parallel:
          - get: cloud-platform-cli-image
          - get: cloud-platform-infrastructure-repository
      - task: execute-components-apply
        image: cloud-platform-cli-image
        config:
          platform: linux
          params:
            <<: [*AUTH0_CONF, *AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
            CLUSTER_NAME: ((cluster_name))
          inputs:
            - name: cloud-platform-infrastructure-repository
          run:
            path: /bin/bash
            dir: cloud-platform-infrastructure-repository/terraform/aws-accounts/cloud-platform-aws/vpc/eks/core/components
            args:
            - -c
            - |
              if [[ "$CLUSTER_NAME" == *"live"* || "$CLUSTER_NAME" == *"manager"* ]]; then
                echo "Cannot apply against production clusters"
                exit 1
              else
                (
                  aws eks --region eu-west-2 update-kubeconfig --name $CLUSTER_NAME
                )
                cloud-platform terraform apply --workspace $CLUSTER_NAME --skip-version-check
              fi
  
  - name: custom-integration-tests
    serial: true
    plan:
      - in_parallel:
        - get: cloud-platform-infrastructure-repository
        - get: cloud-platform-infrastructure-image
      - do:  
         - task: run-go-tests
           image: cloud-platform-infrastructure-image
           config:
            platform: linux
            params:
              <<: [*AWS_CREDENTIALS, *KUBECONFIG_PARAMS]
              CLUSTER_NAME: ((cluster_name))
            inputs:
            - name: cloud-platform-infrastructure-repository
            run:
              path: /bin/bash
              dir: cloud-platform-infrastructure-repository
              args:
                - -c
                - |
                  aws eks --region eu-west-2 update-kubeconfig --name $CLUSTER_NAME

                  # https://onsi.github.io/ginkgo/#recommended-continuous-integration-configuration
                  cd ./test;  ginkgo -r -v --timeout=2400s --show-node-events --randomize-suites --randomize-all --keep-going --flake-attempts=2 --poll-progress-after=120s --procs=6 --compilers=3 --fail-on-pending --race --trace

